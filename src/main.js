const { app, BrowserWindow, dialog, ipcMain } = require('electron');
const { autoUpdater } = require('electron-updater');
const log = require('electron-log');
const path = require('path');
const url = require('url');

let mainWindow;
let progressWindow;

// Configurar logs para depuraci√≥n
log.transports.file.resolvePath = () => path.join(app.getPath('userData'), 'logs/main.log');
autoUpdater.logger = log;
autoUpdater.logger.transports.file.level = 'info';

app.on('ready', () => {
  log.info('üü¢ Aplicaci√≥n iniciada');

  // Crear la ventana principal
  mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'preload.js'), // Habilita comunicaci√≥n segura
    },
  });

  // Cargar la p√°gina principal
  mainWindow.loadURL(
    url.format({
      pathname: path.join(__dirname, 'views/index.html'),
      protocol: 'file',
      slashes: true,
    })
  );

  // Desactivar descarga autom√°tica
  autoUpdater.autoDownload = false;

  // Verificar actualizaciones al iniciar
  autoUpdater.checkForUpdates();

  mainWindow.on('closed', () => {
    mainWindow = null;
  });
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// üì¢ Evento: Actualizaci√≥n disponible
autoUpdater.on('update-available', () => {
  log.info('‚úÖ Actualizaci√≥n disponible');

  dialog
    .showMessageBox(mainWindow, {
      type: 'info',
      title: 'Actualizaci√≥n disponible',
      message: 'Hay una nueva actualizaci√≥n disponible. ¬øQuieres descargarla ahora?',
      buttons: ['S√≠', 'No'],
    })
    .then((result) => {
      if (result.response === 0) {
        log.info('‚ö° Iniciando descarga de actualizaci√≥n...');

        // Crear ventana de progreso
        progressWindow = new BrowserWindow({
          width: 400,
          height: 200,
          title: 'Descargando actualizaci√≥n...',
          parent: mainWindow,
          modal: true,
          webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            preload: path.join(__dirname, 'preload.js'),
          },
        });

        progressWindow.loadURL(
          url.format({
            pathname: path.join(__dirname, 'views/progress.html'),
            protocol: 'file',
            slashes: true,
          })
        );

        autoUpdater.downloadUpdate();
      } else {
        log.info('‚ùå Usuario cancel√≥ la actualizaci√≥n.');
      }
    });
});

// üì¢ Evento: Progreso de descarga
autoUpdater.on('download-progress', (progress) => {
  log.info(`‚¨áÔ∏è Descarga en progreso: ${progress.percent.toFixed(2)}%`);

  if (progressWindow) {
    progressWindow.webContents.send('download-progress', progress.percent);
  }
});

// üì¢ Evento: Descarga completada
autoUpdater.on('update-downloaded', () => {
  log.info('‚úÖ Descarga completada');

  if (progressWindow) {
    progressWindow.close();
  }

  dialog
    .showMessageBox(mainWindow, {
      type: 'info',
      title: 'Actualizaci√≥n lista',
      message: 'La actualizaci√≥n se descarg√≥ correctamente. ¬øQuieres instalarla ahora?',
      buttons: ['Instalar ahora', 'M√°s tarde'],
    })
    .then((result) => {
      if (result.response === 0) {
        log.info('üöÄ Instalando actualizaci√≥n...');
        autoUpdater.quitAndInstall();
      } else {
        log.info('‚è≥ Instalaci√≥n pospuesta.');
      }
    });
});

// üì¢ Evento: Error en la actualizaci√≥n
autoUpdater.on('error', (err) => {
  log.error('‚ö†Ô∏è Error al buscar o descargar actualizaciones:', err.message);
});

ipcMain.on('cancel-update', () => {
  log.info('‚ùå Cancelando la descarga de la actualizaci√≥n...');
  autoUpdater.autoDownload = false;
  if (progressWindow) {
    progressWindow.close();
  }
});
